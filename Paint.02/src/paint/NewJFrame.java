/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paint;

import java.awt.Canvas;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Color;
import java.awt.List;
import java.util.ArrayList;
import paint.controller.Functions;
import paint.model.Circle;
import paint.model.Ellipse;
import paint.model.Line;
import paint.model.NShape;
import paint.model.Rectangle;
import paint.model.Shape;
import paint.model.Square;
import paint.model.Triangle;

/**
 *
 * @author Fayez
 */
public class NewJFrame extends javax.swing.JFrame {

    int x1=1,y1=1,x2=4,y2=4,r,pc=0;
    ArrayList<NShape> shapes=new ArrayList<>();
    ArrayList<NShape> undo=new ArrayList<>();
    ArrayList<NShape> redo=new ArrayList<>();
    int[] X=new int[2];
    int[] Y=new int[2];
    NShape ttt=new NShape();
    Functions f=new Functions();
    public NewJFrame() {
        initComponents();
        shapes.add(ttt);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvas1 = new java.awt.Canvas();
        can = new java.awt.Canvas();
        shape = new javax.swing.JComboBox<>();
        sel = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        del = new javax.swing.JRadioButton();
        move = new javax.swing.JRadioButton();
        cchoose = new javax.swing.JColorChooser();
        fill = new javax.swing.JRadioButton();
        copy = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        can.setBackground(new java.awt.Color(255, 255, 255));
        can.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                canMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                canMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                canMouseReleased(evt);
            }
        });
        can.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                canMouseDragged(evt);
            }
        });

        shape.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pencil", "Line", "Circle", "Rectangle", "Square", "Triangle", "Ellipse" }));
        shape.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shapeActionPerformed(evt);
            }
        });

        sel.setText("Select");

        jLabel1.setText("Colour");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        del.setText("Delete");
        del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delActionPerformed(evt);
            }
        });

        move.setText("Move");
        move.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveActionPerformed(evt);
            }
        });

        fill.setText("Fill");
        fill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillActionPerformed(evt);
            }
        });

        copy.setText("Copy");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(153, 153, 153)
                                .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(cchoose, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(can, javax.swing.GroupLayout.PREFERRED_SIZE, 737, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)
                        .addGap(36, 36, 36)
                        .addComponent(move)
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(del, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(shape, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addComponent(sel)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fill)
                                .addGap(79, 79, 79)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(copy)
                                .addGap(55, 55, 55)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(shape, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(copy)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(sel)
                                    .addComponent(jButton1)
                                    .addComponent(del)
                                    .addComponent(fill)
                                    .addComponent(move)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(8, 8, 8)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(cchoose, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addComponent(can, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void canMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canMouseReleased
        Graphics g=can.getGraphics();
        if(copy.isSelected()&&pc==2){
            pc=0;
            Graphics2D g2=(Graphics2D)g;
            int dx=X[0]-X[1];
            int dy=Y[0]-Y[1];
            System.out.println(X[0]+"\n"+Y[0]+"\n"+X[1]+"\n"+Y[1]+"\n");
            for(int i=shapes.size()-1;i>=0;i--){
                if(f.contains(shapes.get(i), x1, y1)==1){
                        NShape neww=shapes.get(i);
                        neww.getShape().setX1(neww.getShape().getX1()+dx);
                        neww.getShape().setY1(neww.getShape().getY1()+dy);
                        neww.getShape().setX2(neww.getShape().getX2()+dx);
                        neww.getShape().setY2(neww.getShape().getY2()+dy);
                        shapes.add(neww);
                }    
            }   
            f.refresh(shapes, g, can);
        }
        else if(fill.isSelected()){
            Graphics2D g2=(Graphics2D)g;
            g2.setPaint(cchoose.getColor());
            try{
                for(NShape n:shapes){
                    if(f.contains(n, x1, y1)==1){
                       if(n.getName().equals("Rectangle")){
                           Rectangle R=(Rectangle)n.getShape();
                           R.setColour(cchoose.getColor());
                           R.setFill(true);
                           NShape v= new NShape("Rectangle",R);
                           shapes.remove(n);
                           shapes.add(v);
                       }
                    }

                }
                f.refresh(shapes, g, can);
            }
            catch(Exception e){
                f.refresh(shapes, g, can);
            }
        }
        else if(move.isSelected()){
            int dx=x2-x1;
            int index = -1;
            int dy=y2-y1;
            for(int i=shapes.size()-1;i>=0;i--){
                if(f.contains(shapes.get(i), x1, y1)==1){
                        shapes.get(i).getShape().setX1(shapes.get(i).getShape().getX1()+dx);
                        shapes.get(i).getShape().setY1(shapes.get(i).getShape().getY1()+dy);
                        shapes.get(i).getShape().setX2(shapes.get(i).getShape().getX2()+dx);
                        shapes.get(i).getShape().setY2(shapes.get(i).getShape().getY2()+dy);
                }    
            }
            
            f.refresh(shapes, g, can);
        }
       else if(del.isSelected()){
            x1=evt.getX();
            y1=evt.getY();
            try{
            for(NShape n:shapes){
                if(f.contains(n, x1, y1)==1)
                    shapes.remove(n);
            }
            f.refresh(shapes, g, can);}
            catch(Exception e){
                f.refresh(shapes, g, can);
            }
        }
        else{
            int l,w;
            int[] xs=new int[3];
            int[] ys=new int[3];
            Graphics2D g2=(Graphics2D)g;
            if(shape.getSelectedItem().equals("Line")){
                Line ll=new Line(x1,y1,x2,y2,cchoose.getColor());
                ll.draw(g);
                NShape n=new NShape("line",ll);
                shapes.add(n);
            }
            else if(shape.getSelectedItem().equals("Circle")){
                Circle c=new Circle(false,x1,y1,x2,y2,cchoose.getColor());
                NShape n=new NShape("Circle",c);
                shapes.add(n);
            }
            else if(shape.getSelectedItem().equals("Rectangle")){
                Rectangle r=new Rectangle(false,x1,y1,x2,y2,cchoose.getColor());
                r.draw(g);
                NShape n=new NShape("Rectangle",r);
                shapes.add(n);
            }
            else if(shape.getSelectedItem().equals("Square")){
                Square s=new Square(false,x1,y1,x2,y2,cchoose.getColor());
                s.draw(g);
                NShape n=new NShape("Square",s);
                shapes.add(n);
            }
            else if(shape.getSelectedItem().equals("Triangle")){
                Triangle t=new Triangle(false,x1,y1,x2,y2,cchoose.getColor());
                t.draw(g);
                NShape n=new NShape("Triangle",t);
                shapes.add(n);
            }
            else if(shape.getSelectedItem().equals("Ellipse")){
                Ellipse e=new Ellipse(false,x1,y1,x2,y2,cchoose.getColor());
                e.draw(g);
                NShape n=new NShape("Ellipse",e);
                shapes.add(n);
            }
        }
    }//GEN-LAST:event_canMouseReleased

    private void canMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canMousePressed
        if(copy.isSelected()){
            X[pc]=evt.getX();
            Y[pc]=evt.getY();
            pc++;
        }
        else{
            x1=evt.getX();
            y1=evt.getY();
        }
    }//GEN-LAST:event_canMousePressed

    private void canMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canMouseDragged
        x2=evt.getX();
        Graphics g=can.getGraphics();
        y2=evt.getY();
        if(shape.getSelectedItem().equals("Pencil"))
            g.drawLine(x2,y2,x2,y2);
        else if(move.isSelected());
        else if(copy.isSelected());
        else{
            try{
                int l,w;
                int[] xs=new int[3];
                int[] ys=new int[3];
                Graphics2D g2=(Graphics2D)g;
                if(shape.getSelectedItem().equals("Line")){
                    Line ll=new Line(x1,y1,x2,y2,Color.LIGHT_GRAY);
                    ll.draw(g);
                    NShape n=new NShape("line",ll);
                    shapes.remove(shapes.size()-1);
                    shapes.add(n);
                }
                else if(shape.getSelectedItem().equals("Circle")){
                    Circle c=new Circle(false,x1,y1,x2,y2,cchoose.getColor());
                    NShape n=new NShape("Circle",c);
                    shapes.remove(shapes.size()-1);
                    shapes.add(n);
                }
                else if(shape.getSelectedItem().equals("Rectangle")){
                    Rectangle r=new Rectangle(false,x1,y1,x2,y2,Color.green);
                    r.draw(g);
                    NShape n=new NShape("Rectangle",r);
                    shapes.remove(shapes.size()-1);
                    shapes.add(n);
                }
                else if(shape.getSelectedItem().equals("Square")){
                    Square s=new Square(false,x1,y1,x2,y2,Color.black);
                    s.draw(g);
                    NShape n=new NShape("Square",s);
                    shapes.remove(shapes.size()-1);
                    shapes.add(n);
                }
                else if(shape.getSelectedItem().equals("Triangle")){
                    Triangle t=new Triangle(false,x1,y1,x2,y2,Color.black);
                    t.draw(g);
                    NShape n=new NShape("Triangle",t);
                    shapes.remove(shapes.size()-1);
                    shapes.add(n);
                }
                else if(shape.getSelectedItem().equals("Ellipse")){
                    Ellipse e=new Ellipse(false,x1,y1,x2,y2,Color.black);
                    e.draw(g);
                    NShape n=new NShape("Ellipse",e);
                    shapes.remove(shapes.size()-1);
                    shapes.add(n);
                }
                f.refresh(shapes, g, can);

            }
            catch(Exception e){
                f.refresh(shapes, g, can);
            }
        }
    }//GEN-LAST:event_canMouseDragged

    private void shapeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shapeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_shapeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Graphics g=can.getGraphics();
        f.refresh(shapes, g, can);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_delActionPerformed

    private void canMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canMouseClicked

    }//GEN-LAST:event_canMouseClicked

    private void fillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fillActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fillActionPerformed

    private void moveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_moveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Canvas can;
    private java.awt.Canvas canvas1;
    private javax.swing.JColorChooser cchoose;
    private javax.swing.JRadioButton copy;
    private javax.swing.JRadioButton del;
    private javax.swing.JRadioButton fill;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton move;
    private javax.swing.JRadioButton sel;
    private javax.swing.JComboBox<String> shape;
    // End of variables declaration//GEN-END:variables
}
